spikesnap = "cursor", spikedash = "solid", spikethickness = 2,
tickangle = -45))
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
results[[1]][15]
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
results[[1]][15]
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
results[[1]][15]
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
results[[1]][15]
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
results[[1]][15]
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
results[[1]][15]
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
results[[1]][15]
library(biomechanics)
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
results[[1]][15]
?labels
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
results[[1]][15]
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
results[[1]][15]
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
library(biomechanics)
results[[1]][15]
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
results[[1]][15]
library(biomechanics)
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
results[[1]][15]
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
results[[1]][15]
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
results[[1]][15]
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/Jannick/practice") -> results
results[[1]][15]
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice")
triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice") -> results
results[[1]]["plot.pos.thetaKnee"]
results[[1]]["plot.vel.thetaKnee"]
results[[1]]["plot.acc.thetaKnee"]
results[[1]]["plot.vel.xHip"]
library(biomechanics)
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice") -> results
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice") -> results
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice") -> results
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice") -> results
results[[1]]["plot.vel.xHip"]
library(biomechanics)
?scale_fill_viridis_d
triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice") -> results
results[[1]]["plot.vel.xHip"]
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice") -> results
results[[1]]["plot.vel.xHip"]
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice") -> results
results[[1]]["plot.vel.xHip"]
library(biomechanics)
results[[1]]["plot.pos.xAnkle"]
path = "/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice"
joints = c("Ankle", "Knee", "Hip")
#path = "/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice"
#joints = c("Ankle", "Knee", "Hip")
setwd(path)
library(dplyr)
library(ggplot2)
positions <- lapply(Sys.glob("tj_data*.xlsx"), readxl::read_excel, sheet = 1)
angles <- lapply(Sys.glob("tj_data*.xlsx"), readxl::read_excel, sheet = 2)
df.phase <- readxl::read_xlsx("tj_phase.xlsx")
# Creating lists of joints ----
joints.x <- c()
joints.y <- c()
joints.theta <- c()
for (i in 1:length(joints)){
joints.x[i] <- paste0("x", joints[i])
joints.y[i] <- paste0("y", joints[i])
joints.theta[i] <- paste0("theta", joints[i])
}
joints.list <- list(joints.x, joints.y, joints.theta)
# Compute linear velocities and accelerations ----
for (i in 1:length(positions)){
positions[[i]] <- positions[[i]] %>%
mutate(trial = i,
phase = "flight")
positions[[i]] <- bind_cols(positions[[i]],
pos2vel.all(positions[[i]], joints.x),
pos2vel.all(positions[[i]], joints.y),
pos2velXY.all(positions[[i]], joints))
positions[[i]] <- bind_cols(positions[[i]],
vel2acc.all(positions[[i]], joints.x),
vel2acc.all(positions[[i]], joints.y),
vel2accXY.all(positions[[i]], joints))
}
# Compute angular speeds and accelerations ----
for (i in 1:length(angles)){
angles[[i]] <- angles[[i]] %>%
mutate(trial = i)
for (j in 1:length(joints.theta)){
angles.temp <- deg360.all(angles[[i]], joints.theta)
angles[[i]][joints.theta[j]] <- angles.temp[j]
}
angles[[i]] <- bind_cols(angles[[i]],
pos2vel.all(angles[[i]], joints.theta))
angles[[i]] <- bind_cols(angles[[i]],
vel2acc.all(angles[[i]], joints.theta))
}
# Compute touchdown and take-off ----
for (i in 1:length(positions)){
for(j in 1:nrow(df.phase)){
for(k in 1:nrow(positions[[i]])){
if(positions[[i]]$t[k] >= df.phase$td[j] &&
positions[[i]]$t[k] <= df.phase$to[j]){
positions[[i]]$phase[k] = "support"
}
}
}
}
# Combine data into "df" ----
df.positions <- tibble()
df.angles <- tibble()
df <- tibble()
for (i in 1:length(positions)){df.positions <- bind_rows(df.positions, positions[i])}
for (i in 1:length(angles)){df.angles <- bind_rows(df.angles, angles[i])}
if (identical(df.positions[['t']],df.angles[['t']]) != TRUE){
stop("Datasheets not time matched - export from Tracker again.")
} else {
df <- bind_cols(df.positions, df.angles)
df <- df[, !(colnames(df) %in% c("t1", "trial1")), drop = FALSE]
df <- df[complete.cases(df), ]
}
# Filtering ----
b <- signal::butter(2, .3, type = "low")
df.filter <- tibble(.rows = nrow(df))
df.filter$t <- df$t
for (i in 2:ncol(df)){
x <- df[[i]]
suppressWarnings(df.filter[[i]] <- signal::filtfilt(b, x))
colnames(df.filter)[i] <- colnames(df)[i]
}
df.filter$phase <- df$phase
df[["xAnkle"]]
df[["xAnkle"]][1]
head(df$phase)
summary(df$phase)
View(df)
df <- df %>%
mutate(td = ifelse(phase != lag(phase) && phase=="support", TRUE, FALSE),
to = ifelse(phase != lag(phase) && phase=="flight", TRUE, FALSE))
df.result <- df %>%
filter(td == TRUE)
View(df)
df <- df %>%
mutate(td = if_else(phase != lag(phase) && phase=="support", TRUE, FALSE),
to = if_else(phase != lag(phase) && phase=="flight", TRUE, FALSE))
df.result <- df %>%
filter(td == TRUE)
df <- df %>%
mutate(td = if_else(phase != lag(phase), TRUE, FALSE),
to = if_else(phase != lag(phase) && phase=="flight", TRUE, FALSE))
df.result <- df %>%
filter(td == TRUE)
View(df.result)
df <- df %>%
mutate(td = if_else(phase != lag(phase), TRUE, FALSE),
to = if_else(phase != lag(phase) & phase=="flight", TRUE, FALSE))
df.result <- df %>%
filter(td == TRUE)
df <- df %>%
mutate(td = if_else(phase != lag(phase), & phase=="support", TRUE, FALSE),
to = if_else(phase != lag(phase) & phase=="flight", TRUE, FALSE))
df <- df %>%
mutate(td = if_else(phase != lag(phase) & phase=="support", TRUE, FALSE),
to = if_else(phase != lag(phase) & phase=="flight", TRUE, FALSE))
df.result <- df %>%
filter(td == TRUE)
df.result[["xAnkle"]][2]-df.result[["xAnkle"]][1]
results[[1]]["plot.vel.xHip"]
# Important measures:
# Horisontal velocity at td and to (and loss).
# Take-off angle
# Duration on ground
# Distribution of phase distances (and determination of technique)
results = tibble()
df <- df %>%
mutate(td = if_else(phase != lag(phase) & phase=="support", TRUE, FALSE),
to = if_else(phase != lag(phase) & phase=="flight", TRUE, FALSE))
df.result <- df %>%
filter(td == TRUE)
results$hop_distance = df.result[["xAnkle"]][2]-df.result[["xAnkle"]][1]
results$step_distance = df.result[["xAnkle"]][3]-df.result[["xAnkle"]][2]
results$hop_distance[1] = df.result[["xAnkle"]][2]-df.result[["xAnkle"]][1]
# Important measures:
# Horisontal velocity at td and to (and loss).
# Take-off angle
# Duration on ground
# Distribution of phase distances (and determination of technique)
results <- tibble()
df <- df %>%
mutate(td = if_else(phase != lag(phase) & phase=="support", TRUE, FALSE),
to = if_else(phase != lag(phase) & phase=="flight", TRUE, FALSE))
df.result <- df %>%
filter(td == TRUE)
results$hop_distance[1] = df.result[["xAnkle"]][2]-df.result[["xAnkle"]][1]
results$step_distance[1] = df.result[["xAnkle"]][3]-df.result[["xAnkle"]][2]
results$hop_distance[1] <- df.result[["xAnkle"]][2]-df.result[["xAnkle"]][1]
# Important measures:
# Horisontal velocity at td and to (and loss).
# Take-off angle
# Duration on ground
# Distribution of phase distances (and determination of technique)
results <- tibble(.rows = 1)
df <- df %>%
mutate(td = if_else(phase != lag(phase) & phase=="support", TRUE, FALSE),
to = if_else(phase != lag(phase) & phase=="flight", TRUE, FALSE))
df.result <- df %>%
filter(td == TRUE)
results$hop_distance <- df.result[["xAnkle"]][2]-df.result[["xAnkle"]][1]
results$step_distance <- df.result[["xAnkle"]][3]-df.result[["xAnkle"]][2]
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice") -> results
results[[1]]["plot.vel.xHip"]
?which
# Important measures:
# Horisontal velocity at td and to (and loss).
# Take-off angle
# Duration on ground
results$hop_support <- df.phase$to[1]-df.phase$td[1]
results$step_support <- df.phase$to[2]-df.phase$td[2]
triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice") -> results
triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice") -> res
View(res)
df.phase$to[1]-df.phase$td[1]
path = "/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice"
joints = c("Ankle", "Knee", "Hip")
#path = "/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice"
#joints = c("Ankle", "Knee", "Hip")
setwd(path)
library(dplyr)
library(ggplot2)
positions <- lapply(Sys.glob("tj_data*.xlsx"), readxl::read_excel, sheet = 1)
angles <- lapply(Sys.glob("tj_data*.xlsx"), readxl::read_excel, sheet = 2)
df.phase <- readxl::read_xlsx("tj_phase.xlsx")
# Creating lists of joints ----
joints.x <- c()
joints.y <- c()
joints.theta <- c()
for (i in 1:length(joints)){
joints.x[i] <- paste0("x", joints[i])
joints.y[i] <- paste0("y", joints[i])
joints.theta[i] <- paste0("theta", joints[i])
}
joints.list <- list(joints.x, joints.y, joints.theta)
# Compute linear velocities and accelerations ----
for (i in 1:length(positions)){
positions[[i]] <- positions[[i]] %>%
mutate(trial = i,
phase = "flight")
positions[[i]] <- bind_cols(positions[[i]],
pos2vel.all(positions[[i]], joints.x),
pos2vel.all(positions[[i]], joints.y),
pos2velXY.all(positions[[i]], joints))
positions[[i]] <- bind_cols(positions[[i]],
vel2acc.all(positions[[i]], joints.x),
vel2acc.all(positions[[i]], joints.y),
vel2accXY.all(positions[[i]], joints))
}
# Compute angular speeds and accelerations ----
for (i in 1:length(angles)){
angles[[i]] <- angles[[i]] %>%
mutate(trial = i)
for (j in 1:length(joints.theta)){
angles.temp <- deg360.all(angles[[i]], joints.theta)
angles[[i]][joints.theta[j]] <- angles.temp[j]
}
angles[[i]] <- bind_cols(angles[[i]],
pos2vel.all(angles[[i]], joints.theta))
angles[[i]] <- bind_cols(angles[[i]],
vel2acc.all(angles[[i]], joints.theta))
}
# Compute touchdown and take-off ----
for (i in 1:length(positions)){
for(j in 1:nrow(df.phase)){
for(k in 1:nrow(positions[[i]])){
if(positions[[i]]$t[k] >= df.phase$td[j] &&
positions[[i]]$t[k] <= df.phase$to[j]){
positions[[i]]$phase[k] = "support"
}
}
}
}
# Combine data into "df" ----
df.positions <- tibble()
df.angles <- tibble()
df <- tibble()
for (i in 1:length(positions)){df.positions <- bind_rows(df.positions, positions[i])}
for (i in 1:length(angles)){df.angles <- bind_rows(df.angles, angles[i])}
if (identical(df.positions[['t']],df.angles[['t']]) != TRUE){
stop("Datasheets not time matched - export from Tracker again.")
} else {
df <- bind_cols(df.positions, df.angles)
df <- df[, !(colnames(df) %in% c("t1", "trial1")), drop = FALSE]
df <- df[complete.cases(df), ]
}
df <- df %>%
mutate(td = if_else(phase != lag(phase) & phase=="support", TRUE, FALSE),
to = if_else(phase != lag(phase) & phase=="flight", TRUE, FALSE))
# Filtering ----
b <- signal::butter(2, .3, type = "low")
df.filter <- tibble(.rows = nrow(df))
df.filter$t <- df$t
for (i in 2:ncol(df)){
x <- df[[i]]
suppressWarnings(df.filter[[i]] <- signal::filtfilt(b, x))
colnames(df.filter)[i] <- colnames(df)[i]
}
df.filter$phase <- df$phase
results <- tibble(.rows = 1)
# Important measures:
# Horisontal velocity at td and to (and loss).
# Take-off angle
# Duration on ground
results$hop_support <- df.phase$to[1]-df.phase$td[1]
results$step_support <- df.phase$to[2]-df.phase$td[2]
# Distribution of phase distances (and determination of technique)
df.result <- df %>%
filter(td == TRUE)
results$hop_distance <- df.result[["xAnkle"]][2]-df.result[["xAnkle"]][1]
results$step_distance <- df.result[["xAnkle"]][3]-df.result[["xAnkle"]][2]
triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice") -> res
View(res)
View(res)
# Take-off angle
df.results <- df %>%
filter(to == TRUE | lag(to) == TRUE)
View(df.results)
?tan
?tanh
atan2(df.results$yHip[2]-df.results$yHip[1], df.results$xHip[2]-df.results$xHip[1])
rad2deg(atan2(df.results$yHip[2]-df.results$yHip[1], df.results$xHip[2]-df.results$xHip[1]))
rad2deg(atan2(df.results$yHead[2]-df.results$yHead[1], df.results$xHead[2]-df.results$xHead[1]))
rad2deg(atan2(df.results$yHead[3]-df.results$yHead[2], df.results$xHead[3]-df.results$xHead[2]))
rad2deg(atan2(df.results$yHead[2]-df.results$yHead[1], df.results$xHead[2]-df.results$xHead[1]))
rad2deg(atan2(df.results$yHead[3]-df.results$yHead[2], df.results$xHead[3]-df.results$xHead[2]))
View(df.results)
rad2deg(atan2(df.results$yHead[4]-df.results$yHead[3], df.results$xHead[4]-df.results$xHead[3]))
?lag
# Take-off angle
df.results <- df %>%
filter(to == TRUE | lag(to, 3) == TRUE)
rm(df.results)
# Take-off angle
df.results <- df %>%
filter(to == TRUE | lag(to, 3) == TRUE)
rad2deg(atan2(df.results$yHead[2]-df.results$yHead[1], df.results$xHead[2]-df.results$xHead[1]))
rad2deg(atan2(df.results$y[4]-df.results$yHead[3], df.results$xHead[4]-df.results$xHead[3]))
rad2deg(atan2(df.results$yHead[4]-df.results$yHead[3], df.results$xHead[4]-df.results$xHead[3]))
# Take-off angle
df.results <- df %>%
filter(to == TRUE | lag(to, 2) == TRUE)
rad2deg(atan2(df.results$yHead[2]-df.results$yHead[1], df.results$xHead[2]-df.results$xHead[1]))
rad2deg(atan2(df.results$yHead[4]-df.results$yHead[3], df.results$xHead[4]-df.results$xHead[3]))
# Take-off angle
df.results <- df %>%
filter(to == TRUE | lag(to) == TRUE)
rad2deg(atan2(df.results$yHead[2]-df.results$yHead[1], df.results$xHead[2]-df.results$xHead[1]))
rad2deg(atan2(df.results$yHead[4]-df.results$yHead[3], df.results$xHead[4]-df.results$xHead[3]))
# Take-off angle
df.results <- df %>%
filter(to == TRUE | lead(to) == TRUE)
rad2deg(atan2(df.results$yHead[2]-df.results$yHead[1], df.results$xHead[2]-df.results$xHead[1]))
rad2deg(atan2(df.results$yHead[4]-df.results$yHead[3], df.results$xHead[4]-df.results$xHead[3]))
rad2deg(atan2(df.results$yHip[2]-df.results$yHip[1], df.results$xHip[2]-df.results$xHip[1]))
rad2deg(atan2(df.results$yHip[4]-df.results$yHip[3], df.results$xHip[4]-df.results$xHip[3]))
results[[1]]["plot.pos.xHip"]
res[[1]]["plot.pos.xHip"]
res[[1]]["plot.pos.yHip"]
res[[1]]["plot.pos.yHead"]
rad2deg(atan2(df.results$yHip[2]-df.results$yHip[1], df.results$xHip[2]-df.results$xHip[1]))
rad2deg(atan2(df.results$yHip[4]-df.results$yHip[3], df.results$xHip[4]-df.results$xHip[3]))
# Take-off angle
df.results <- df %>%
filter(to == TRUE | lead(to, 2) == TRUE)
rad2deg(atan2(df.results$yHip[2]-df.results$yHip[1], df.results$xHip[2]-df.results$xHip[1]))
rad2deg(atan2(df.results$yHip[4]-df.results$yHip[3], df.results$xHip[4]-df.results$xHip[3]))
# Take-off angle
df.results <- df %>%
filter(lag(to) == TRUE | lead(to) == TRUE)
rad2deg(atan2(df.results$yHip[2]-df.results$yHip[1], df.results$xHip[2]-df.results$xHip[1]))
rad2deg(atan2(df.results$yHip[4]-df.results$yHip[3], df.results$xHip[4]-df.results$xHip[3]))
# Important measures:
# Horisontal velocity at td and to (and loss).
df.result <- df %>%
filter(td == TRUE | to == TRUE)
library(biomechanics)
triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice") -> res
res[[1]]["plot.pos.yHip"]
View(res)
View(res)
triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice") -> res
View(res)
View(res)
res[[1]]["plot.vel.xHip"]
triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice") -> res
res[[1]]["plot.vel.xHip"]
triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice") -> res
res[[1]]["plot.vel.xHip"]
View(res)
triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice") -> res
res[[1]]["plot.vel.xHip"]
View(res)
View(res)
res[[1]]["plot.pos.xHip"]
res[[1]]["plot.pos.yHip"]
plot_kinematic(df=df, y = yHead, df2=df.phase)
plot_kinematic(df=df, y = pos.yHead, df2=df.phase)
plot_kinematic(df=df, y = "yHead", df2=df.phase)
knitr::opts_chunk$set(echo = TRUE)
library(biomechanics)
res <-triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice")
res[[1]]["plot.pos.yHip"]
cat(plotly:::plotly_iframe(res[[1]]["plot.pos.yHip"]))
plotly:::plotly_build(res[[1]]["plot.pos.yHip"])
plotly:::plotly_iframe(res[[1]]["plot.pos.yHip"])
res[[1]]["plot.pos.yHip"]
knitr::opts_chunk$set(echo = TRUE)
library(biomechanics)
res <-triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice")
View(res)
View(res)
res[[1]]["plot.pos.xAnkle"]
res[[1]]["plot.vel.xAnkle"]
res[[1]]["plot.pos.yHip"]
res[[1]]["plot.pos.yHip"]
res[[1]]["plot.pos.yHip"]
View(res)
knitr::opts_chunk$set(echo = TRUE)
library(biomechanics)
res <-triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice")
View(res)
res[[1]]$plot.pos.thetaKnee
View(res)
library(biomechanics)
library(biomechanics)
library(biomechanics)
knitr::opts_chunk$set(echo = TRUE)
library(biomechanics)
res <-triplejump_2d("/Users/roaldarbol/Documents/SportsMechanics/Jannick/practice")
res[[1]]$plot.acc.xKnee
res[[1]]$plot.acc.thetaKnee
install.packages("knitr")
install.packages("tidyverse")
install.packages(biomechanics)
install.packages("biomechanics")
library(biomechanics)
install.packages("signal")
install.packages("plotly", "htmlwidgets")
install.packages("plotly")
install.packages("Cairo", "htmlwidgets")
install.packages("Cairo")
install.packages('Cairo')
install.packages("Cairo")
options(bitmapType='cairo')
plot_ly(z = ~volcano, type = "surface")
library(plotly)
plot_ly(z = ~volcano, type = "surface")
knitr::opts_chunk$set(echo = TRUE)
require(biomechanics)
require(plotly)
res <-triplejump_2d("/Users/roaldarbol/Library/Mobile Documents/com~apple~CloudDocs/Documents/SportsMechanics/Jannick/practice")
?tooltip
?plotly::ggplotly
library(biomechanics)
knitr::opts_chunk$set(echo = TRUE)
res[[1]]$plot.acc.thetaKnee
install.packages("Cairo")
---
title: "SportsMechanics Report"
author: "Mikkel Roald-Arbøl"
date: "06/04/2020"
output: html_document
editor_options:
chunk_output_type: inline
---
